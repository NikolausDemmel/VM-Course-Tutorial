-*-Org-*-

Translation scheme for rmama.

|-------------------------------------------------------+------------------------+------------------------------------------|
| EXPRESSION                                            | CODE                   | COMMENT                                  |
|-------------------------------------------------------+------------------------+------------------------------------------|
| code-b b p i                                          | RLOADC b i             |                                          |
|-------------------------------------------------------+------------------------+------------------------------------------|
| code-b x p i                                          |                        | handled as (*)                           |
|-------------------------------------------------------+------------------------+------------------------------------------|
| code-b (op e) p i                                     | code-b e p i           |                                          |
|                                                       | OP i                   |                                          |
|-------------------------------------------------------+------------------------+------------------------------------------|
| code-b (e1 op e2) p i                                 | code-b e1 p i          |                                          |
|                                                       | code-b e2 p (i+1)      |                                          |
|                                                       | OP i (i+1)             |                                          |
|-------------------------------------------------------+------------------------+------------------------------------------|
| code-b (if e0 then e1 else e2) p i                    | code-b e0 p i          |                                          |
|                                                       | RJUMPZ A i             |                                          |
|                                                       | code-b e1 p i          |                                          |
|                                                       | JUMP B                 |                                          |
|                                                       | A: code-b e2 p i       |                                          |
|                                                       | B:                     |                                          |
|-------------------------------------------------------+------------------------+------------------------------------------|
| code-b e p i                                          | code-v e p i           | (*)                                      |
|                                                       | RGETBASIC i            |                                          |
|-------------------------------------------------------+------------------------+------------------------------------------|
| code-v b p i                                          | RLOADC b i             |                                          |
|                                                       | RMKBASIC i             |                                          |
|-------------------------------------------------------+------------------------+------------------------------------------|
| code-v x p i                                          | rgetvar x p i          | using reval, CBN scheme                  |
|                                                       | reval i                |                                          |
|-------------------------------------------------------+------------------------+------------------------------------------|
| code-v (op e) p i                                     | code-b (op e) p i      |                                          |
|                                                       | RMKBASIC i             |                                          |
|-------------------------------------------------------+------------------------+------------------------------------------|
| code-v (e1 op e2) p i                                 | code-b (e1 op e2) p i  |                                          |
|                                                       | RMKBASIC i             |                                          |
|-------------------------------------------------------+------------------------+------------------------------------------|
| code-v (if e0 then e1 else e2) p i                    | code-b e0 p i          |                                          |
|                                                       | RJUMPZ A i             |                                          |
|                                                       | code-v e1 p i          |                                          |
|                                                       | JUMP B                 |                                          |
|                                                       | A: code-v e2 p i       |                                          |
|                                                       | B:                     |                                          |
|-------------------------------------------------------+------------------------+------------------------------------------|
| code-v (let x = e in e0) p i                          | code-c e p i           | p' = p + {x -> (L,i)}                    |
|                                                       | code-v e0 p' i+1       |                                          |
|                                                       | MOVE i i+1             |                                          |
|-------------------------------------------------------+------------------------+------------------------------------------|
| code-v (letrec x1 = e1 and ... and xn = en in e0) p i | RALLOC n i             | p' = p + {xj -> (L,i+j-1 : l = 1,...,n)} |
|                                                       | code-c e1 p' (i+n)     |                                          |
|                                                       | RREWRITE i (i+n)       |                                          |
|                                                       | code-c e2 p' (i+n)     |                                          |
|                                                       | RREWRITE (i+1) (i+n)   |                                          |
|                                                       | ...                    |                                          |
|                                                       | code-c en p' (i+n)     |                                          |
|                                                       | RREWRITE (i+n-1) (i+n) |                                          |
|                                                       | code-v e0 p' (i+n)     |                                          |
|                                                       | MOVE i (i+n)           |                                          |
|-------------------------------------------------------+------------------------+------------------------------------------|

Instructions and their implementation:

|---------------+------------------------------------------------|
| INSTRCTION    | IMPLEMENTATION                                 |
|---------------+------------------------------------------------|
| RGETBASIC i   | if(H[R_i] != (B,_)) Error "not basic"          |
|               | else                R_i = H[R_i].v             |
|---------------+------------------------------------------------|
| RMKBASIC i    | R_i = new (B,R_i)                              |
|---------------+------------------------------------------------|
| RLOADC b i    | R_i = b                                        |
|---------------+------------------------------------------------|
| rgetvar x p i | let (t,j) = p x in                             |
|               | case t of                                      |
|               | L => MOVE i j                                  |
|               | G => rpushglob j i                             |
|               | end                                            |
|---------------+------------------------------------------------|
| OP i          | R_i = op R_i                                   |
|---------------+------------------------------------------------|
| OP i j        | R_i = R_i op R_j                               |
|---------------+------------------------------------------------|
| RJUMZ A i     | if (R_i == 0) PC = A                           |
|---------------+------------------------------------------------|
| RPUSHGLOB j i | R_i = GP->v[j]                                 |
|---------------+------------------------------------------------|
| MOVE i j      | R_i = R_j                                      |
|---------------+------------------------------------------------|
| RALLOC n i    | for (i=1;i<=n;i++)                             |
|               | R_i = new (C,-1,-1)                            |
|---------------+------------------------------------------------|
| RREWRITE i j  | H[R_i] = H[R_j]                                |
|---------------+------------------------------------------------|
| reval i       | check if i points to a closure and evaluate it |
|               | otherwise do nothing                           |
|---------------+------------------------------------------------|


